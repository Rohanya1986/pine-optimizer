//==================================================================================================
// SECTION 10: OPTIONS STRATEGY SELECTION AND MANAGEMENT
//==================================================================================================

// FIXED: Delta management at pivot levels
getDeltaExposure(price, pivot_level, direction) =>
    // FIXED: Added comprehensive error handling
    if na(price) or na(pivot_level) or pivot_level <= 0 or na(direction)
        1.0  // Default exposure
    else
        // Default exposure
        float exposure = 1.0
        
        // Calculate normalized distance to pivot
        distance = math.abs(price - pivot_level) / price * 100
        
        // Adjust delta exposure based on proximity
        if distance < 0.3
            // Very close to pivot - reduce delta exposure
            exposure := 0.5  // Reduce by 50%
        else if distance < 1.0
            // Moderately close - slightly reduce delta
            exposure := 0.8  // Reduce by 20%
        else
            // Far from pivot - normal delta exposure
            exposure := 1.0
        
        // Adjust based on direction
        if direction == "approaching"
            exposure := exposure * 0.8  // Further reduce when approaching pivots
        
        exposure

// FIXED: Advanced options strategy selection with early exits
getAdvancedOptionStrategy(signal_type, vol_regime, strength, is_virgin, predicted_volatility, days_to_expiry, distance_to_next_pivot) =>
    // FIXED: Added comprehensive error handling for all parameters
    if na(signal_type) or signal_type == "None" or na(vol_regime) or na(strength) or na(is_virgin) or 
       na(predicted_volatility) or predicted_volatility <= 0 or na(days_to_expiry) or na(distance_to_next_pivot)
        "None"
    else
        // Calculate key decision factors once
        float rel_distance = na(distance_to_next_pivot) or distance_to_next_pivot <= 0 or close <= 0 ? 
                           0.0 : (distance_to_next_pivot / close) * 100
        
        float vol_edge = atrValue > 0 ? predicted_volatility / atrValue : 1.0
        bool significant_vol_expansion = vol_edge > 1.3
        
        bool strong_setup = strength >= 2 or (is_virgin and significant_vol_expansion) or rel_distance > 3.0
        
        // Decision tree based on signal type and volatility regime
        if signal_type == "Buy"
            if vol_regime == "EXTREME"
                "Bull Call Spread"
            else if vol_regime == "HIGH"
                strong_setup ? "Long Call" : "Bull Call Spread"
            else if vol_regime == "LOW"
                if strong_setup
                    "Bull Call Spread"
                else if days_to_expiry <= 10
                    "Cash-Secured Put"
                else
                    "Cash-Secured Put"
            else  // NORMAL
                strong_setup ? "Long Call" : "Bull Call Spread"
        else if signal_type == "Sell"
            if vol_regime == "EXTREME"
                "Bear Put Spread"
            else if vol_regime == "HIGH"
                strong_setup ? "Long Put" : "Bear Put Spread"
            else if vol_regime == "LOW"
                if strong_setup
                    "Bear Put Spread"
                else if days_to_expiry <= 10
                    "Covered Call"
                else
                    "Covered Call"
            else  // NORMAL
                strong_setup ? "Long Put" : "Bear Put Spread"
        else if signal_type == "Range"
            if days_to_expiry < 14
                "Iron Butterfly"
            else if vol_regime == "LOW"
                "Iron Condor"
            else
                "Iron Butterfly"
        else
            "None"

// FIXED: Calculate stop loss level based on pivot level and ATR
getStopLoss(signal_type, pivot_level, atr_value) =>
    // FIXED: Added comprehensive error handling
    if na(signal_type) or (signal_type != "Buy" and signal_type != "Sell") or na(pivot_level) or pivot_level <= 0
        0.0  // Return default on error
    else
        float result = 0.0
        
        if useFixedStopLoss
            if signal_type == "Buy"
                result := pivot_level * (1 - fixedStopLossPercent / 100)
            else if signal_type == "Sell"
                result := pivot_level * (1 + fixedStopLossPercent / 100)
        else
            // FIXED: Check for valid ATR value
            float safe_atr = na(atr_value) or atr_value <= 0 ? ta.atr(14) : atr_value
            
            if signal_type == "Buy"
                result := pivot_level - (safe_atr * adaptedStopLossMultiplier)
            else if signal_type == "Sell"
                result := pivot_level + (safe_atr * adaptedStopLossMultiplier)
        
        result

// FIXED: Find the next pivot level in the direction of the trade for target calculation
getNextPivot(direction, current_price) =>
    // FIXED: Added comprehensive error handling
    if na(direction) or (direction != "Buy" and direction != "Sell") or na(current_price) or current_price <= 0
        [0.0, 0.0]  // Return defaults on error
    else
        float target = 0.0
        float distance = 0.0
        
        if direction == "Buy"
            // Find next resistance pivot above current price
            min_distance = 999999.0
            
            // Check daily pivots first
            if array.size(pivotLevelsDaily) > 0
                // FIXED: Added proper bounds checking in pivot search loop
                for i = 0 to array.size(pivotLevelsDaily) - 1
                    if i < array.size(pivotLabelsDaily) and i < array.size(pivotLevelsDaily)
                        level = array.get(pivotLevelsDaily, i)
                        label = array.get(pivotLabelsDaily, i)
                        
                        if not na(level) and level > current_price and
                           (str.contains(label, "R") or str.contains(label, "H") or label == "D-PP") and 
                           (level - current_price) < min_distance
                            target := level
                            min_distance := level - current_price
            
            // Check weekly pivots if available
            if showWeekly and array.size(pivotLevelsWeekly) > 0
                // FIXED: Added proper bounds checking in weekly pivot search loop
                for i = 0 to array.size(pivotLevelsWeekly) - 1
                    if i < array.size(pivotLabelsWeekly) and i < array.size(pivotLevelsWeekly)
                        level = array.get(pivotLevelsWeekly, i)
                        label = array.get(pivotLabelsWeekly, i)
                        
                        if not na(level) and level > current_price and
                           (str.contains(label, "R") or str.contains(label, "H") or label == "W-PP") and 
                           (level - current_price) < min_distance
                            target := level
                            min_distance := level - current_price
            
            // If no pivot found, use a default target based on ATR
            if target == 0.0 and not na(atrValue) and atrValue > 0
                target := current_price + (atrValue * 2)
                min_distance := atrValue * 2
            
            distance := min_distance
            
        else if direction == "Sell"
            // Find next support pivot below current price
            min_distance = 999999.0
            
            // Check daily pivots first
            if array.size(pivotLevelsDaily) > 0
                // FIXED: Added proper bounds checking in support pivot search loop
                for i = 0 to array.size(pivotLevelsDaily) - 1
                    if i < array.size(pivotLabelsDaily) and i < array.size(pivotLevelsDaily)
                        level = array.get(pivotLevelsDaily, i)
                        label = array.get(pivotLabelsDaily, i)
                        
                        if not na(level) and level > 0 and level < current_price and
                           (str.contains(label, "S") or str.contains(label, "L") or label == "D-PP") and 
                           (current_price - level) < min_distance
                            target := level
                            min_distance := current_price - level
            
            // Check weekly pivots if available
            if showWeekly and array.size(pivotLevelsWeekly) > 0
                // FIXED: Added proper bounds checking in weekly support pivot search loop
                for i = 0 to array.size(pivotLevelsWeekly) - 1
                    if i < array.size(pivotLabelsWeekly) and i < array.size(pivotLevelsWeekly)
                        level = array.get(pivotLevelsWeekly, i)
                        label = array.get(pivotLabelsWeekly, i)
                        
                        if not na(level) and level > 0 and level < current_price and
                           (str.contains(label, "S") or str.contains(label, "L") or label == "W-PP") and 
                           (current_price - level) < min_distance
                            target := level
                            min_distance := current_price - level
            
            // If no pivot found, use a default target based on ATR
            if target == 0.0 and not na(atrValue) and atrValue > 0
                target := current_price - (atrValue * 2)
                min_distance := atrValue * 2
            
            distance := min_distance
        
        [target, distance]

// FIXED: Calculate appropriate position size based on account size, risk tolerance, and setup quality
calculatePositionSize(signal_type, entry_price, stop_level, setup_strength, is_virgin) =>
    // FIXED: Added comprehensive error handling
    if na(signal_type) or na(entry_price) or na(stop_level) or na(setup_strength) or na(is_virgin) or 
       entry_price <= 0 or stop_level <= 0 or entry_price == stop_level or setup_strength < 0
        1  // Default position size
    else
        // Default position size
        int position_size = 1
        
        // Base position sizing on risk percentage
        risk_amount = accountSize * (baseRiskPercent / 100)
        
        // Adjust risk based on setup strength
        if setup_strength == 3  // Triple confluence or very strong setup
            risk_amount := risk_amount * 1.3
        else if setup_strength == 2  // Double confluence or strong setup
            risk_amount := risk_amount * 1.1
        
        // Adjust risk for virgin pivots
        if is_virgin
            risk_amount := risk_amount * 1.2  // Increase by 20% for virgin pivots
        
        // Adjust for volatility if enabled
        if adaptPositionToVolatility
            risk_amount := risk_amount * adaptedPositionSize
        
        // Calculate risk per point
        risk_per_point = math.abs(entry_price - stop_level)
        
        // Calculate position size in lots
        if risk_per_point > 0  // Avoid division by zero
            lot_risk = risk_per_point * lotSize
            if lot_risk > 0
                position_size := math.floor(risk_amount / lot_risk)
        
        // Cap at maximum position size
        position_size := math.min(position_size, maxPositionSize)
        
        // Ensure minimum of 1 lot
        position_size := math.max(position_size, 1)
        
        position_size

// FIXED: Determine appropriate days to expiration (DTE) based on strategy and market conditions
getOptimalDTE(strategy_type, vol_regime, is_virgin) =>
    // FIXED: Added error checking for parameters
    if na(strategy_type) or na(vol_regime) or na(is_virgin)
        adaptedDte  // Default value on error
    else
        base_dte = adaptedDte
        int result = base_dte  // Default value
        
        // Adjust based on strategy type
        if strategy_type == "Long Call" or strategy_type == "Long Put"
            // Directional options need less time in high volatility, more in low
            if vol_regime == "EXTREME"
                result := math.max(base_dte - 8, 5)
            else if vol_regime == "HIGH"
                result := math.max(base_dte - 5, 7)
            else if vol_regime == "LOW"
                result := math.min(base_dte + 5, 30)
            else
                result := base_dte
            
            // Virgin pivots might need slightly more time
            if is_virgin
                result := math.min(result + 3, 30)
        
        else if strategy_type == "Bull Call Spread" or strategy_type == "Bear Put Spread"
            // Vertical spreads typically need medium timeframe
            if vol_regime == "EXTREME"
                result := math.max(base_dte - 5, 7)
            else if vol_regime == "HIGH"
                result := math.max(base_dte - 3, 10)
            else if vol_regime == "LOW"
                result := math.min(base_dte + 5, 25)
            else
                result := base_dte
        
        else if strategy_type == "Cash-Secured Put" or strategy_type == "Covered Call"
            // Premium selling benefits from longer time decay
            if vol_regime == "EXTREME"
                result := math.max(base_dte - 5, 7)
            else if vol_regime == "HIGH"
                result := base_dte
            else if vol_regime == "LOW"
                result := math.min(base_dte + 10, 30)
            else
                result := math.min(base_dte + 5, 25)
        
        else if strategy_type == "Iron Condor" or strategy_type == "Iron Butterfly"
            // Range-bound strategies benefit from medium timeframe
            if vol_regime == "HIGH"
                result := math.max(base_dte - 5, 10)
            else if vol_regime == "LOW"
                result := math.min(base_dte + 5, 28)
            else
                result := base_dte
        
        result

// FIXED: Function to determine appropriate strike prices for options strategies
getStrikes(strategy, current_price, target_price, stop_price) =>
    // FIXED: Added comprehensive error handling
    if na(strategy) or na(current_price) or current_price <= 0
        array.new_string(4, "")  // Return empty array on error
    else
        // Array to hold strike prices as strings
        string[] strikes = array.new_string(4, "")
        
        // Round to nearest strike price increment (typically 50 for Nifty)
        strike_increment = 50
        atm_strike = math.round(current_price / strike_increment) * strike_increment
        
        if strategy == "Long Call" or strategy == "Long Put"
            // For long options, use ATM or slightly OTM strike
            option_strike = str.tostring(atm_strike)
            array.set(strikes, 0, option_strike)
            
        else if strategy == "Bull Call Spread" and not na(target_price) and target_price > 0
            // Lower strike ITM or ATM, upper strike at or near target
            long_strike = str.tostring(math.floor(current_price / strike_increment) * strike_increment)
            short_strike = str.tostring(math.round(target_price / strike_increment) * strike_increment)
            array.set(strikes, 0, long_strike)
            array.set(strikes, 1, short_strike)
            
        else if strategy == "Bear Put Spread" and not na(target_price) and target_price > 0
            // Higher strike ITM or ATM, lower strike at or near target
            long_strike = str.tostring(math.ceil(current_price / strike_increment) * strike_increment)
            short_strike = str.tostring(math.round(target_price / strike_increment) * strike_increment)
            array.set(strikes, 0, long_strike)
            array.set(strikes, 1, short_strike)
            
        else if strategy == "Cash-Secured Put"
            // Short strike at or just below support pivot
            short_strike = str.tostring(math.floor(current_price / strike_increment) * strike_increment)
            array.set(strikes, 0, "Cash")  // Placeholder for cash component
            array.set(strikes, 1, short_strike)
            
        else if strategy == "Covered Call"
            // Short strike at or just above resistance pivot
            short_strike = str.tostring(math.ceil(current_price / strike_increment) * strike_increment)
            array.set(strikes, 0, "Stock")  // Placeholder for stock component
            array.set(strikes, 1, short_strike)
            
        else if (strategy == "Iron Condor" or strategy == "Iron Butterfly") and 
                 not na(rangeUpperLevel) and not na(rangeLowerLevel) and
                 rangeUpperLevel > 0 and rangeLowerLevel > 0
            // For iron condor/butterfly
            lower_width = strategy == "Iron Condor" ? 2 : 1
            upper_width = strategy == "Iron Condor" ? 2 : 1
            
            lower_short = math.round(rangeLowerLevel / strike_increment) * strike_increment
            upper_short = math.round(rangeUpperLevel / strike_increment) * strike_increment
            
            lower_long = lower_short - lower_width * strike_increment
            upper_long = upper_short + upper_width * strike_increment
            
            array.set(strikes, 0, str.tostring(upper_long))  // Long call
            array.set(strikes, 1, str.tostring(upper_short)) // Short call
            array.set(strikes, 2, str.tostring(lower_short)) // Short put
            array.set(strikes, 3, str.tostring(lower_long))  // Long put
        
        strikes

