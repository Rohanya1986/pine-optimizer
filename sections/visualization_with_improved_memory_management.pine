//==================================================================================================
// SECTION 11: VISUALIZATION WITH IMPROVED MEMORY MANAGEMENT
//==================================================================================================

// FIXED: Store created drawing objects for better memory management
var line[] lines = array.new_line()
var label[] labels = array.new_label()
var box[] boxes = array.new_box()
var table[] tables = array.new_table()

// FIXED: Efficient drawing management
cleanupDrawings() =>
    // FIXED: Added proper error handling for array operations
    
    // Remove excess lines if beyond limit
    int toRemove = array.size(lines) - maxDrawingObjects
    if toRemove > 0
        for i = 1 to toRemove
            if array.size(lines) > 0
                ln = array.shift(lines)
                line.delete(ln)
    
    // Remove excess labels if beyond limit
    toRemove := array.size(labels) - maxDrawingObjects
    if toRemove > 0
        for i = 1 to toRemove
            if array.size(labels) > 0
                lb = array.shift(labels)
                label.delete(lb)
    
    // Remove excess boxes if beyond limit
    toRemove := array.size(boxes) - maxDrawingObjects / 2  // Fewer boxes needed
    if toRemove > 0
        for i = 1 to toRemove
            if array.size(boxes) > 0
                bx = array.shift(boxes)
                box.delete(bx)
    
    // Clear all tables to avoid stale data
    if array.size(tables) > 0
        for i = 0 to array.size(tables) - 1
            if i < array.size(tables)
                tb = array.get(tables, i)
                table.delete(tb)
        array.clear(tables)

// FIXED: Draw pivot levels on the chart
drawPivots() =>
    cleanupDrawings()  // Remove excess drawing objects
    
    // Draw daily pivots
    if showDaily and array.size(pivotLevelsDaily) > 0
        // FIXED: Added comprehensive bounds checking in draw loop
        for i = 0 to array.size(pivotLevelsDaily) - 1
            if i < array.size(pivotLabelsDaily) and i < array.size(pivotIsVirginDaily) and i < array.size(pivotLevelsDaily)
                level = array.get(pivotLevelsDaily, i)
                pivotLabel = array.get(pivotLabelsDaily, i)
                isVirgin = array.get(pivotIsVirginDaily, i)
                
                if na(level) or level <= 0
                    continue
                
                // Determine line style and color based on pivot type and virgin status
                lineStyle = line.style_dashed
                lineColor = color.blue
                lineWidth = 1
                
                if isVirgin
                    lineWidth := 2  // Make virgin pivots more visible
                    lineColor := color.new(color.blue, 0)  // Special color for virgin pivots
                
                lineId = line.new(bar_index - 10, level, bar_index, level, 
                        width=lineWidth, 
                        color=lineColor, 
                        style=lineStyle, 
                        extend=extend.right)
                array.push(lines, lineId)
                
                // Add virgin indicator to label if applicable
                displayLabel = isVirgin ? pivotLabel + " (Virgin)" : pivotLabel
                
                labelId = label.new(bar_index, level, displayLabel, 
                         color=color.new(lineColor, 90), 
                         textcolor=lineColor, 
                         style=label.style_label_left)
                array.push(labels, labelId)
                
                // Check for price approaching pivot for alerts
                if enableAlerts and isNearPivot(close, level, alertDistance)
                    virginText = isVirgin ? " (Virgin Pivot)" : ""
                    alert_text = "Price " + str.tostring(close) + " near " + pivotLabel + virginText + " at " + str.tostring(level)
                    alert(alert_text, alert.freq_once_per_bar)
    
    // Draw weekly pivots
    if showWeekly and array.size(pivotLevelsWeekly) > 0
        // FIXED: Added comprehensive bounds checking in weekly pivots draw loop
        for i = 0 to array.size(pivotLevelsWeekly) - 1
            if i < array.size(pivotLabelsWeekly) and i < array.size(pivotIsVirginWeekly) and i < array.size(pivotLevelsWeekly)
                level = array.get(pivotLevelsWeekly, i)
                pivotLabel = array.get(pivotLabelsWeekly, i)
                isVirgin = array.get(pivotIsVirginWeekly, i)
                
                if na(level) or level <= 0
                    continue
                
                // Determine line style and color for weekly
                lineWidth = 2
                lineColor = color.orange
                lineStyle = line.style_solid
                
                if isVirgin
                    lineWidth := 3  // Make virgin pivots more visible
                    lineColor := color.new(color.orange, 0)  // Special color for virgin weekly pivots
                
                lineId = line.new(bar_index - 10, level, bar_index, level, 
                        width=lineWidth, 
                        color=lineColor, 
                        style=lineStyle,
                        extend=extend.right)
                array.push(lines, lineId)
                
                // Add virgin indicator to label if applicable
                displayLabel = isVirgin ? pivotLabel + " (Virgin)" : pivotLabel
                
                labelId = label.new(bar_index, level, displayLabel, 
                         color=color.new(lineColor, 90), 
                         textcolor=lineColor, 
                         style=label.style_label_left)
                array.push(labels, labelId)
                
                // Check for price approaching pivot for alerts
                if enableAlerts and isNearPivot(close, level, alertDistance)
                    virginText = isVirgin ? " (Virgin Pivot)" : ""
                    alert_text = "Price " + str.tostring(close) + " near " + pivotLabel + virginText + " at " + str.tostring(level)
                    alert(alert_text, alert.freq_once_per_bar)
    
    // Draw monthly pivots
    if showMonthly and array.size(pivotLevelsMonthly) > 0
        // FIXED: Added comprehensive bounds checking in monthly pivots draw loop
        for i = 0 to array.size(pivotLevelsMonthly) - 1
            if i < array.size(pivotLabelsMonthly) and i < array.size(pivotIsVirginMonthly) and i < array.size(pivotLevelsMonthly)
                level = array.get(pivotLevelsMonthly, i)
                pivotLabel = array.get(pivotLabelsMonthly, i)
                isVirgin = array.get(pivotIsVirginMonthly, i)
                
                if na(level) or level <= 0
                    continue
                
                // Determine line style and color for monthly
                lineWidth = 2
                lineColor = color.green
                lineStyle = line.style_dotted
                
                if isVirgin
                    lineWidth := 3  // Make virgin pivots more visible
                    lineColor := color.new(color.green, 0)  // Special color for virgin monthly pivots
                
                lineId = line.new(bar_index - 10, level, bar_index, level, 
                        width=lineWidth, 
                        color=lineColor, 
                        style=lineStyle, 
                        extend=extend.right)
                array.push(lines, lineId)
                
                // Add virgin indicator to label if applicable
                displayLabel = isVirgin ? pivotLabel + " (Virgin)" : pivotLabel
                
                labelId = label.new(bar_index, level, displayLabel, 
                         color=color.new(lineColor, 90), 
                         textcolor=lineColor, 
                         style=label.style_label_left)
                array.push(labels, labelId)
                
                // Check for price approaching pivot for alerts
                if enableAlerts and isNearPivot(close, level, alertDistance)
                    virginText = isVirgin ? " (Virgin Pivot)" : ""
                    alert_text = "Price " + str.tostring(close) + " near " + pivotLabel + virginText + " at " + str.tostring(level)
                    alert(alert_text, alert.freq_once_per_bar)

// FIXED: Draw confluence zones where multiple pivots align
drawConfluenceZones() =>
    // Draw confluence zones
    if showConfluence
        // FIXED: Added comprehensive bounds checking in confluence zones draw loop
        for i = 0 to array.size(confluenceZones) - 1
            if i < array.size(confluenceLabels) and i < array.size(confluenceCounts) and 
               i < array.size(confluenceTypes) and i < array.size(confluenceVirgin) and 
               i < array.size(confluenceZones)
                level = array.get(confluenceZones, i)
                label_text = array.get(confluenceLabels, i)
                count = array.get(confluenceCounts, i)
                conf_type = array.get(confluenceTypes, i)
                isVirgin = array.get(confluenceVirgin, i)
                
                if na(level) or level <= 0
                    continue
                
                // Color based on confluence count and type
                color_value = count >= 3 ? color.red : color.orange
                if conf_type == "S"
                    color_value := count >= 3 ? color.green : color.lime
                else if conf_type == "P"
                    color_value := count >= 3 ? color.purple : color.fuchsia
                
                // Adjust opacity for virgin pivots
                if isVirgin
                    color_value := color.new(color_value, 0)  // More visible
                
                // Draw a box highlighting the confluence zone
                boxId = box.new(bar_index - 20, level + (level * confluenceThreshold / 100), 
                       bar_index, level - (level * confluenceThreshold / 100), 
                       border_color=color_value, 
                       bgcolor=color.new(color_value, 90), 
                       border_width=1,
                       extend=extend.right)
                array.push(boxes, boxId)
                
                // Add a label describing the confluence
                virgin_text = isVirgin ? " (Virgin)" : ""
                labelId = label.new(bar_index, level, label_text + " (x" + str.tostring(count) + ")" + virgin_text, 
                         color=color.new(color_value, 70), 
                         textcolor=color.white, 
                         style=label.style_label_left,
                         size=size.small)
                array.push(labels, labelId)
                
                // Alert on strong confluence zones when price is approaching
                if enableAlerts and count >= 3 and isNearPivot(close, level, alertDistance)
                    virgin_alert = isVirgin ? "Virgin " : ""
                    alert_text = "Price " + str.tostring(close) + " approaching strong " + virgin_alert + "confluence zone at " + str.tostring(level)
                    alert(alert_text, alert.freq_once_per_bar)

// FIXED: Create a table showing option-specific indicators
createOptionIndicatorsTable() =>
    if showOptionIndicators
        // Create a table in the top right corner
        optionsTable = table.new(position.top_right, 2, 7, frame_color=color.gray, frame_width=1, border_width=1)
        array.push(tables, optionsTable)
        
        // Set up headers
        table.cell(optionsTable, 0, 0, "Options Indicators", bgcolor=color.gray, text_color=color.white)
        table.cell(optionsTable, 1, 0, "Value", bgcolor=color.gray, text_color=color.white)
        
        // Volatility Regime
        table.cell(optionsTable, 0, 1, "Volatility Regime", text_color=color.white)
        vol_color = lowVolRegime ? color.green : highVolRegime ? color.red : color.orange
        table.cell(optionsTable, 1, 1, volRegime, text_color=vol_color)
        
        // ATR Percentage
        table.cell(optionsTable, 0, 2, "ATR %", text_color=color.white)
        // FIXED: Added safeguard for na values
        atr_str = na(atrPercent) ? "N/A" : str.tostring(atrPercent, "#.##") + "%"
        table.cell(optionsTable, 1, 2, atr_str, text_color=vol_color)
        
        // Trend Strength
        table.cell(optionsTable, 0, 3, "Trend (ADX)", text_color=color.white)
        trend_color = adxValue > 25 ? color.green : color.gray
        // FIXED: Added safeguard for na values
        adx_str = na(adxValue) ? "N/A" : str.tostring(adxValue, "#.#") + (adxValue > 25 ? " Strong" : " Weak")
        table.cell(optionsTable, 1, 3, adx_str, text_color=trend_color)
        
        // Optimal Pivot Method
        table.cell(optionsTable, 0, 4, "Pivot Method", text_color=color.white)
        table.cell(optionsTable, 1, 4, activePivotMethod, text_color=color.white)
        
        // Recommended DTE
        table.cell(optionsTable, 0, 5, "Optimal DTE", text_color=color.white)
        table.cell(optionsTable, 1, 5, str.tostring(adaptedDte) + " days", text_color=color.white)
        
        // Volume Status
        table.cell(optionsTable, 0, 6, "Volume Status", text_color=color.white)
        vol_status = isVolumeSpike ? "SPIKE" : "Normal"
        vol_color = isVolumeSpike ? color.green : color.white
        table.cell(optionsTable, 1, 6, vol_status, text_color=vol_color)

// FIXED: Create a table showing strategy signals and recommendations
createStrategySignalsTable() =>
    // Create a table in the top left corner
    strategyTable = table.new(position.top_left, 3, 9, frame_color=color.gray, frame_width=1, border_width=1)
    array.push(tables, strategyTable)
    
    // Set up headers
    table.cell(strategyTable, 0, 0, "Strategy Signals", bgcolor=color.gray, text_color=color.white)
    table.cell(strategyTable, 1, 0, "Details", bgcolor=color.gray, text_color=color.white)
    table.cell(strategyTable, 2, 0, "Recommendation", bgcolor=color.gray, text_color=color.white)
    
    // Pivot Bounce Strategy
    table.cell(strategyTable, 0, 1, "Pivot Bounce", text_color=color.white)
    bounce_color = bounceSignal == "Buy" ? color.green : bounceSignal == "Sell" ? color.red : color.white
    bounce_text = bounceSignal == "None" ? "None" : 
                 bounceSignal + " at " + str.tostring(bounceLevel) + " (" + str.tostring(bounceStrength) + "★)"
    table.cell(strategyTable, 1, 1, bounce_text, text_color=bounce_color)
    
    // Pivot Breakout Strategy
    table.cell(strategyTable, 0, 2, "Pivot Breakout", text_color=color.white)
    breakout_color = breakoutSignal == "Buy" ? color.green : breakoutSignal == "Sell" ? color.red : color.white
    breakout_text = breakoutSignal == "None" ? "None" : 
                   breakoutSignal + " at " + str.tostring(breakoutLevel) + " (" + str.tostring(breakoutStrength) + "★)"
    table.cell(strategyTable, 1, 2, breakout_text, text_color=breakout_color)
    
    // Range Strategy
    table.cell(strategyTable, 0, 3, "Range Signal", text_color=color.white)
    range_text = rangeSignal == "Range" ? 
                "Between " + str.tostring(rangeLowerLevel) + " and " + str.tostring(rangeUpperLevel) + 
                " (" + str.tostring(rangeStrength) + "★)" : "None"
    table.cell(strategyTable, 1, 3, range_text, text_color=color.blue)
    
    // Determine primary signal for strategy recommendation
    primary_signal = bounceSignal != "None" ? bounceSignal : 
                    breakoutSignal != "None" ? breakoutSignal : rangeSignal
    signal_strength = bounceSignal != "None" ? bounceStrength : 
                     breakoutSignal != "None" ? breakoutStrength : rangeStrength
    pivot_level = bounceSignal != "None" ? bounceLevel : 
                 breakoutSignal != "None" ? breakoutLevel : 0.0
    is_virgin = bounceSignal != "None" ? bounceIsVirgin : 
                breakoutSignal != "None" ? breakoutIsVirgin : false
    predicted_vol = bounceSignal != "None" ? bouncePredictedVol : 
                   breakoutSignal != "None" ? breakoutPredictedVol : atrValue
    
    // Get target and distance information
    float target_level = 0.0
    float distance_to_target = 0.0
    
    if primary_signal == "Buy" or primary_signal == "Sell"
        [targetLevel, distanceToTarget] = getNextPivot(primary_signal, close)
        target_level := targetLevel
        distance_to_target := distanceToTarget
    
    // Options Strategy Recommendation
    optimal_dte = getOptimalDTE(primary_signal != "None" ? primary_signal : "None", volRegime, is_virgin)
    strategy_rec = getAdvancedOptionStrategy(primary_signal, volRegime, signal_strength, is_virgin, predicted_vol, optimal_dte, distance_to_target)
    
    table.cell(strategyTable, 0, 4, "Options Strategy", text_color=color.white)
    table.cell(strategyTable, 1, 4, strategy_rec, text_color=color.white)
    
    // Determine recommended stop loss and target
    float stop_level = 0.0
    
    if primary_signal == "Buy" or primary_signal == "Sell"
        stop_level := getStopLoss(primary_signal, pivot_level, atrValue)
    
    // Position Size Recommendation
    table.cell(strategyTable, 0, 5, "Position Size", text_color=color.white)
    
    int position_size = 0
    if primary_signal == "Buy" or primary_signal == "Sell"
        position_size := calculatePositionSize(primary_signal, close, stop_level, signal_strength, is_virgin)
    
    position_size_text = position_size > 0 ? 
                        str.tostring(position_size) + " lots" : 
                        "N/A"
    table.cell(strategyTable, 1, 5, position_size_text, text_color=color.white)
    
    // Risk-Reward Ratio
    table.cell(strategyTable, 0, 6, "Risk:Reward", text_color=color.white)
    
    float risk_reward = 0.0
    if primary_signal == "Buy" or primary_signal == "Sell" and stop_level > 0 and target_level > 0
        risk = math.abs(close - stop_level)
        reward = math.abs(target_level - close)
        if risk > 0
            risk_reward := reward / risk
    
    rr_text = risk_reward > 0 ? str.tostring(risk_reward, "#.##") : "N/A"
    rr_color = risk_reward >= 2.0 ? color.green : risk_reward >= 1.5 ? color.orange : risk_reward > 0 ? color.red : color.white
    table.cell(strategyTable, 1, 6, rr_text, text_color=rr_color)
    
    // Optimal DTE
    table.cell(strategyTable, 0, 7, "Recommended DTE", text_color=color.white)
    dte_text = optimal_dte > 0 ? str.tostring(optimal_dte) + " days" : "N/A"
    table.cell(strategyTable, 1, 7, dte_text, text_color=color.white)
    
    // Strike Selection
    table.cell(strategyTable, 0, 8, "Strike Selection", text_color=color.white)
    
    strikes_text = "N/A"
    if strategy_rec != "None" and (primary_signal == "Buy" or primary_signal == "Sell" or primary_signal == "Range")
        strikes = getStrikes(strategy_rec, close, target_level, stop_level)
        
        // FIXED: Added proper bounds checking on strikes array
        if strategy_rec == "Long Call" or strategy_rec == "Long Put"
            if array.size(strikes) > 0
                strikes_text := array.get(strikes, 0)
        else if strategy_rec == "Bull Call Spread" or strategy_rec == "Bear Put Spread"
            if array.size(strikes) > 1
                strikes_text := array.get(strikes, 0) + "/" + array.get(strikes, 1)
        else if strategy_rec == "Cash-Secured Put" or strategy_rec == "Covered Call"
            if array.size(strikes) > 1
                strikes_text := array.get(strikes, 1)
        else if strategy_rec == "Iron Condor" or strategy_rec == "Iron Butterfly"
            if array.size(strikes) > 3
                strikes_text := array.get(strikes, 3) + "/" + array.get(strikes, 2) + " - " + 
                               array.get(strikes, 1) + "/" + array.get(strikes, 0)
    
    table.cell(strategyTable, 1, 8, strikes_text, text_color=color.white)
    
    // Add Trade Recommendation
    if primary_signal != "None"
        if primary_signal == "Buy" or primary_signal == "Sell"
            rec = "Strategy: " + strategy_rec + "\n"
            rec := rec + "Entry: " + primary_signal + " at " + str.tostring(close) + "\n"
            rec := rec + "Target: " + str.tostring(target_level) + "\n"
            rec := rec + "Stop: " + str.tostring(stop_level) + "\n"
            rec := rec + "Position: " + position_size_text
            
            signal_color = primary_signal == "Buy" ? color.green : color.red
            table.cell(strategyTable, 2, 1, rec, text_color=signal_color)
        else if primary_signal == "Range"
            rec = "Strategy: " + strategy_rec + "\n"
            rec := rec + "Upper Boundary: " + str.tostring(rangeUpperLevel) + "\n"
            rec := rec + "Lower Boundary: " + str.tostring(rangeLowerLevel) + "\n"
            rec := rec + "Setup Strength: " + str.tostring(rangeStrength) + "★"
            
            table.cell(strategyTable, 2, 3, rec, text_color=color.blue)
        
        // Option Structure Recommendation
        if strategy_rec == "Bull Call Spread"
            // FIXED: Added proper bounds checking on strikes array
            strikes = getStrikes(strategy_rec, close, target_level, stop_level)
            if array.size(strikes) > 1
                bull_call_long = array.get(strikes, 0)
                bull_call_short = array.get(strikes, 1)
                
                if bull_call_long != "" and bull_call_short != ""
                    long_val = str.tonumber(bull_call_long)
                    short_val = str.tonumber(bull_call_short)
                    
                    if not na(long_val) and not na(short_val)
                        max_risk = position_size * lotSize * math.abs(short_val - long_val)
                        
                        options_rec = "Buy " + bull_call_long + " Call\n" +
                                     "Sell " + bull_call_short + " Call\n" +
                                     "DTE: " + str.tostring(optimal_dte) + " days\n" +
                                     "Max Risk: " + str.tostring(max_risk)
                        
                        table.cell(strategyTable, 2, 4, options_rec, text_color=color.white)
        
        else if strategy_rec == "Bear Put Spread"
            // FIXED: Added proper bounds checking on strikes array
            strikes = getStrikes(strategy_rec, close, target_level, stop_level)
            if array.size(strikes) > 1
                bear_put_long = array.get(strikes, 0)
                bear_put_short = array.get(strikes, 1)
                
                if bear_put_long != "" and bear_put_short != ""
                    long_val = str.tonumber(bear_put_long)
                    short_val = str.tonumber(bear_put_short)
                    
                    if not na(long_val) and not na(short_val)
                        max_risk = position_size * lotSize * math.abs(long_val - short_val)
                        
                        options_rec = "Buy " + bear_put_long + " Put\n" +
                                     "Sell " + bear_put_short + " Put\n" +
                                     "DTE: " + str.tostring(optimal_dte) + " days\n" +
                                     "Max Risk: " + str.tostring(max_risk)
                        
                        table.cell(strategyTable, 2, 4, options_rec, text_color=color.white)
        
        else if strategy_rec == "Long Call" or strategy_rec == "Long Put"
            // FIXED: Added proper bounds checking on strikes array
            strikes = getStrikes(strategy_rec, close, target_level, stop_level)
            if array.size(strikes) > 0
                long_option_strike = array.get(strikes, 0)
                
                if long_option_strike != ""
                    options_rec = "Buy " + long_option_strike + 
                                 " " + (strategy_rec == "Long Call" ? "Call" : "Put") + "\n" +
                                 "DTE: " + str.tostring(optimal_dte) + " days\n" +
                                 "Profit Target: Next pivot at " + str.tostring(target_level) + "\n" +
                                 "Stop Loss: " + (useFixedStopLoss ? 
                                               str.tostring(fixedStopLossPercent) + "% of premium" : 
                                               "Price at " + str.tostring(stop_level))
                    
                    table.cell(strategyTable, 2, 4, options_rec, text_color=color.white)
        
        else if strategy_rec == "Cash-Secured Put"
            // FIXED: Added proper bounds checking on strikes array
            strikes = getStrikes(strategy_rec, close, target_level, stop_level)
            if array.size(strikes) > 1
                csp_strike = array.get(strikes, 1)
                
                if csp_strike != ""
                    options_rec = "Sell " + csp_strike + " Put\n" +
                                 "DTE: " + str.tostring(optimal_dte) + " days\n" +
                                 "Profit Target: " + str.tostring(adaptedProfitTarget) + "% of premium\n" +
                                 "Exit if price falls below " + str.tostring(stop_level)
                    
                    table.cell(strategyTable, 2, 4, options_rec, text_color=color.white)
        
        else if strategy_rec == "Covered Call"
            // FIXED: Added proper bounds checking on strikes array
            strikes = getStrikes(strategy_rec, close, target_level, stop_level)
            if array.size(strikes) > 1
                cc_strike = array.get(strikes, 1)
                
                if cc_strike != ""
                    options_rec = "Sell " + cc_strike + " Call\n" +
                                 "DTE: " + str.tostring(optimal_dte) + " days\n" +
                                 "Profit Target: " + str.tostring(adaptedProfitTarget) + "% of premium\n" +
                                 "Exit if price rises above " + str.tostring(stop_level)
                    
                    table.cell(strategyTable, 2, 4, options_rec, text_color=color.white)
        
        else if strategy_rec == "Iron Condor" or strategy_rec == "Iron Butterfly"
            // FIXED: Added proper bounds checking on strikes array
            strikes = getStrikes(strategy_rec, close, target_level, stop_level)
            if array.size(strikes) > 3
                ic_long_put = array.get(strikes, 3)
                ic_short_put = array.get(strikes, 2)
                ic_short_call = array.get(strikes, 1)
                ic_long_call = array.get(strikes, 0)
                
                if ic_long_put != "" and ic_short_put != "" and ic_short_call != "" and ic_long_call != ""
                    options_rec = "Sell " + ic_short_call + " Call/" + ic_short_put + " Put\n" +
                                 "Buy " + ic_long_call + " Call/" + ic_long_put + " Put\n" +
                                 "DTE: " + str.tostring(optimal_dte) + " days\n" +
                                 "Profit Target: " + str.tostring(adaptedProfitTarget) + "% of max profit"
                    
                    table.cell(strategyTable, 2, 4, options_rec, text_color=color.white)
